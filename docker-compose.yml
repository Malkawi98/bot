version: "3.8" # Specify a version for clarity and feature compatibility

services:

  # --- Milvus Vector Database Stack ---
  milvus:
    image: milvusdb/milvus:v2.3.9
    container_name: milvus-standalone # More descriptive name
    restart: always
    command: ["milvus", "run", "standalone"]
    ports:
      - "19530:19530" # gRPC port
      - "9091:9091"   # HTTP port
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      # Milvus needs Minio credentials
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_ACCESS_KEY: minioadmin
    volumes:
      - milvus-data:/var/lib/milvus
    depends_on:
      etcd:
        condition: service_healthy # Wait for etcd to be healthy
      minio:
        condition: service_healthy # Wait for minio to be healthy
    healthcheck:
      # Check Milvus HTTP health endpoint
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s # Give Milvus time to start before checking

  etcd:
    image: quay.io/coreos/etcd:v3.5.5 # Using a specific stable version
    container_name: etcd
    restart: always
    environment:
      # Use map format consistently
      ALLOW_NONE_AUTHENTICATION: "yes" # Quotes are good practice for boolean/numeric strings
      ETCD_ENABLE_V2: "true"           # Quotes are good practice
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
    volumes:
      - etcd-data:/etcd-data
    ports:
      - "2379:2379"
    healthcheck:
      # Use etcdctl to check health (available in the image)
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    # Use a known recent stable tag or your specified one
    # image: minio/minio:RELEASE.2024-05-16T19-48-11Z # Known stable tag
    image: minio/minio:RELEASE.2025-04-08T15-41-24Z-cpuv1 # Your specified tag
    container_name: minio
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: minioadmin # For compatibility if needed elsewhere
      MINIO_SECRET_KEY: minioadmin # For compatibility if needed elsewhere
    # Let Minio use its default entrypoint/command logic but add console address
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # Minio API Port (used by Milvus)
      - "9001:9001" # Minio Console Port (for web access)
    volumes:
      - minio-data:/data
    healthcheck:
      # Use the mc command included in the image.
      # Attempt to set an alias and check readiness within the healthcheck itself.
      # Use CMD-SHELL to allow '&&'
      test: ["CMD-SHELL", "mc alias set health_check http://localhost:9000 minioadmin minioadmin && mc ready health_check"]
      interval: 10s # Increase interval slightly
      timeout: 5s   # Increase timeout slightly
      retries: 5
      start_period: 15s # Give Minio more time to initialize before first check
    # NO custom entrypoint here

  # --- Application Stack ---
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web-app
    restart: always
    # -------- development command --------
    command: sh -c "alembic -c /code/alembic.ini upgrade head && uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload" # Run migrations then start app
    # -------- production command (example) --------
    # command: gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000
    env_file:
      - ./src/.env # Ensure this path is correct relative to docker-compose.yml
    environment:
      # Service discovery via container names
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MILVUS_URI: http://milvus:19530
      # Ensure DB connection details are here or in .env
      # DB_HOST: db
      # DB_PORT: 5432
      # DB_USER: user
      # DB_PASSWORD: pass
      # DB_NAME: db
    ports:
      # Map host port 8003 to container port 8000 (internal standard)
      - "8003:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
    volumes:
      - ./src/app:/code/app # Mount your application code
      - ./src/.env:/code/.env # Mount your env file

  db:
    image: postgres:15-alpine
    container_name: postgres-db # More descriptive name
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass # Use secrets for production
      POSTGRES_DB: db
    ports:
      - "5432:5432"
    volumes:
      - "./dump:/docker-entrypoint-initdb.d" # Scripts here run on init
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      # Use pg_isready utility
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis-cache # More descriptive name
    restart: always
    volumes:
      - redis-data:/data
    healthcheck:
      # Use redis-cli ping command
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # --- Milvus UI (Attu) ---
  milvus-ui:
    image: zilliz/attu:v2.3.1
    container_name: milvus-ui
    restart: always
    environment:
      # Connect Attu to Milvus using the service name and gRPC port
      MILVUS_URL: milvus:19530 # Attu usually connects via gRPC port
    ports:
      - "8001:3000" # Map host 8001 to Attu's default port 3000
    depends_on:
      milvus:
        condition: service_healthy # Wait for Milvus itself

# --- Volumes Definition ---
volumes:
  postgres-data:
  redis-data:
  milvus-data:
  etcd-data:
  minio-data:

# --- Network Definition (Optional but recommended) ---
# networks:
#   app-network:
#     driver: bridge

# Add 'networks: - app-network' to each service if using a custom network
