version: "3.8"

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: web-app
    restart: always
    command: sh -c "alembic -c /code/alembic.ini upgrade head && gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000"
    env_file:
      - ./src/.env
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MILVUS_URI: http://milvus:19530
    ports:
      - "8003:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
    # No volumes for code in production!

  db:
    image: postgres:15-alpine
    container_name: postgres-db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: db
    ports:
      - "5432:5432"
    volumes:
      - "./dump:/docker-entrypoint-initdb.d"
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:alpine
    container_name: redis-cache
    restart: always
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  milvus:
    image: milvusdb/milvus:v2.3.9
    container_name: milvus-standalone
    restart: always
    command: ["milvus", "run", "standalone"]
    ports:
      - "19530:19530"
      - "9091:9091"
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_ACCESS_KEY: minioadmin
    volumes:
      - milvus-data:/var/lib/milvus
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: etcd
    restart: always
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
      ETCD_ENABLE_V2: "true"
      ETCD_DATA_DIR: /etcd-data
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
    volumes:
      - etcd-data:/etcd-data
    ports:
      - "2379:2379"
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 5s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:RELEASE.2025-04-08T15-41-24Z-cpuv1
    container_name: minio
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD-SHELL", "mc alias set health_check http://localhost:9000 minioadmin minioadmin && mc ready health_check"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  milvus-ui:
    image: zilliz/attu:v2.3.1
    container_name: milvus-ui
    restart: always
    environment:
      MILVUS_URL: milvus:19530
    ports:
      - "8001:3000"
    depends_on:
      milvus:
        condition: service_healthy

volumes:
  postgres-data:
  redis-data:
  milvus-data:
  etcd-data:
  minio-data:
